
(define (lex metamath-string)
  (string-tokenize metamath-string))

(define (split-at tok tokens)
  (let walk ((path '()) (tokens tokens))
    (cond ((null? tokens) (values (reverse path) '()))
          ((equal? tok (car tokens)) (values (reverse path) (cdr tokens)))
          (else (walk (cons (car tokens) path) (cdr tokens))))))

(define (parse tokens)
  (match tokens
    (() '())
    (("$(" rest ...)
     (let-values (((_ rest) (split-at "$)" rest)))
       (parse rest)))
    (("$[" file-name "$]" rest ...)
     `((include-stmt ,file-name) . ,(parse rest)))
    (("${" rest ...)
     (let-values (((stmt rest) (split-at "$}" rest)))
       `((scope-stmt ,(parse stmt)) . ,(parse rest))))
    (("$c" rest ...)
     (let-values (((stmt rest) (split-at "$." rest)))
       `((constant-stmt ,@stmt) . ,(parse rest))))
    (("$v" rest ...)
     (let-values (((stmt rest) (split-at "$." rest)))
       `((variable-stmt ,@stmt) . ,(parse rest))))
    (("$d" rest ...)
     (let-values (((stmt rest) (split-at "$." rest)))
       `((disjoint-stmt ,@stmt) . ,(parse rest))))
    ((name "$f" typecode var "$." rest ...)
     `((floating-stmt ,name ,typecode ,var) . ,(parse rest)))
    ((name "$e" typecode rest ...)
     (let-values (((stmt rest) (split-at "$." rest)))
       `((essential-stmt ,name ,typecode ,stmt) . ,(parse rest))))
    ((name "$a" typecode rest ...)
     (let-values (((stmt rest) (split-at "$." rest)))
       `((axiom-stmt ,name ,typecode ,stmt) . ,(parse rest))))
    ((name "$p" typecode rest ...)
     (let-values (((lhs rest) (split-at "$=" rest)))
       (let-values (((rhs rest) (split-at "$." rest)))
         `((provable-stmt ,name ,typecode ,lhs ,rhs) . ,(parse rest)))))
    (_ (error 'parse "TODO" tokens))))
